seurat.data=scRNAseq::BaronPancreasData()
typeof(seurat.data)
class(seurat.data)
class(seurat.data)[1]
class(seurat.data)[1] == "SingleCellExperiment"
library(Seurat)
library(SingleR)
26267/5
26267/7
26267/9
seurat.data <- as.Seurat(seurat.data, data = NULL)
seurat.data[["percent_MT"]] <- PercentageFeatureSet(sc, pattern = "^MT-")
seurat.data[["percent_MT"]] <- PercentageFeatureSet(seurat.data, pattern = "^MT-")
?Seurat:::CreateAssayObject
CreateSeuratObject
Seurat:::CalcN
RNA_counts <- colSums(x = seurat.data, slot = "counts")
feature_counts <- colSums(x = GetAssayData(object = seurat.object, slot = "counts") > 0)
feature_counts <- colSums(x = GetAssayData(object = seurat.data, slot = "counts") > 0)
dim(seurat.data)
dim(seurat.data@meta.data)
seurat.data@meta.data$nCount_RNA <- RNA_counts
seurat.data@meta.data$nFeature_RNA <- feature_counts
seurat.data[["percent_MT"]] <- PercentageFeatureSet(seurat.data, pattern = "^MT-")
VlnPlot(seurat.data, features = "percent_MT")
random.seed=629
n.variable.genes=3000
seurat.data <- SCTransform(seurat.object,
assay = "RNA",
vars.to.regress = "percent_MT",
variable.features.n = n.variable.genes,
seed.use = random.seed,
verbose = FALSE)
seurat.object=seurat.data
rm(seurat.data)
seurat.object <- SCTransform(seurat.object,
assay = "RNA",
vars.to.regress = "percent_MT",
variable.features.n = n.variable.genes,
seed.use = random.seed,
verbose = FALSE)
any(grepl("MT", colnames(seurat.object)))
any(grepl("MT", rownames(seurat.object)))
head(rownames(seurat.object))
any(grepl("^MT-", rownames(seurat.object)))
any(grepl("^MT-|^mt-", rownames(seurat.object)))
is.null(seurat.object@reductions$PCA)
seurat.object <- RunPCA(seurat.object,
features = VariableFeatures(seurat.object),
npcs = 30,
verbose = FALSE,
seed.use = random.seed)
ElbowPlot(seurat.object)
seurat.object <- RunTSNE(seurat.object,
reduction = "pca",
dims = 1:30,
dim.embed = 2,
seed.use = random.seed)
DimPlot(sc)
DimPlot(seurat.object)
# initial clustering
seurat.object <- FindNeighbors(seurat.object, reduction = "pca", dims = 1:30, do.plot = TRUE)
?density
density
rmultinom
?rmultinom
as.double(0)
is.null(seurat.object$seurat_clusters)
names(seurat.object)
"seurat_clusters" %in% names(seurat.object)
View(seurat.object@assays$SCT@meta.features)
View(seurat.object@assays$SCT@data[1:30, 1:30])
View(datatable::data.table(seurat.object@assays$SCT@data[1:30, 1:30]))
View(data.table::data.table(seurat.object@assays$SCT@data[1:30, 1:30]))
View(data.frame(seurat.object@assays$SCT@data[1:30, 1:30]))
?FindClusters
seurat.object <- FindClusters(seurat.object,
resolution = .5,
algorithm = 2,
random.seed = 629)
DimPlot(seurat.object)
seurat.object <- FindClusters(seurat.object,
resolution = .5,
algorithm = 1,
random.seed = 629)
DimPlot(seurat.object)
seurat.object <- FindClusters(seurat.object,
resolution = .5,
algorithm = 3,
random.seed = 629)
DimPlot(seurat.object)
plots <- list()
for (k in seq(c(10, 20, 30, 40, 50))) {seurat.object=FindNeighbors(seurat.object, reduction = "pca", dims = 1:30, k.param = k; seurat.object=FindClusters(seurat.object, random.seed = 629, resolution = .5); plots[[k]]=DimPlot(seurat.object, reduction = "tsne"))}
for (k in seq(c(10, 20, 30, 40, 50))) {seurat.object=FindNeighbors(seurat.object, reduction = "pca", dims = 1:30, k.param = k); seurat.object=FindClusters(seurat.object, random.seed = 629, resolution = .5); plots[[k]]=DimPlot(seurat.object, reduction = "tsne"))}
for (k in seq(c(10, 20, 30, 40, 50))) {seurat.object=FindNeighbors(seurat.object, reduction = "pca", dims = 1:30, k.param = k); seurat.object=FindClusters(seurat.object, random.seed = 629, resolution = .5); plots[[k]]=DimPlot(seurat.object, reduction = "tsne")}
seq(c(10, 20, 30, 40, 50))
for (k in c(10, 20, 30, 40, 50)) {
seurat.object <- FindNeighbors(seurat.object,
reduction = "pca",
dims = 1:30,
k.param = k)
seurat.object <- FindClusters(seurat.object,
resolution = .5,
algorithm = 1,
random.seed = 629)
plots[[k/10]] <- DimPlot(seurat.object, reduction = "tsne")
}
for (i in seq(plots)) {print(plots[[i]])}
for (i in seq(plots)) {print(plots[[i]]$data$ident)}
for (i in seq(plots)) {print(length(unique(levels(plots[[i]]$data$ident))))}
?FindClusters
seurat.object <- FindNeighbors(seurat.object,
reduction = "pca",
dims = 1:30,
k.param = c(10, 20, 30, 40, 50))
?FindNeighbors
seurat.object <- FindNeighbors(seurat.object,
reduction = "pca",
dims = 1:30,
annoy.metric = "cosine")
seurat.object <- FindClusters(seurat.object,
resolution = .5,
algorithm = 1,
random.seed = 629)
DimPlot(seurat.object)
t=GetAssay(seurat.object, assay = "SCT")
t=data.frame(GetAssay(seurat.object, assay = "SCT", slot = "data"))
rm(t)
# setup inputs
norm_counts <- data.frame(seurat.object@assays$SCT@data)
bulk_ref <- HumanPrimaryCellAtlasData()
dif.exp.method="wilcox"
results <- SingleR(test = norm_counts,
ref = bulk_ref,
labels = bulk_ref$label.main,
clusters = seurat.object$seurat_clusters,
method = "cluster",
de.method = dif.exp.method)
View(results)
print("SingleR results: "); table(results$labels)
sc_ref <- BaronPancreasData()
sc_res <- SingleR(test = norm_counts,
ref = sc_ref,
labels = sc_ref$label,
clusters = seurat.object$seurat_clusters,
method = "cluster",
de.method = dif.exp.method)
print("SingleR results: "); table(results$labels)
sprintf("SingleR results: %s", results$labels)
sprintf("SingleR results: %s", table(results$labels))
table(results$labels)
devtools::document()
is.null(sc)
typeof(seurat.object$seurat_clusters)
reclust_list <- list()
?FindVariableFeatures
?FindNeighbors
?FindClusters
head(colnames(seurat.object))
devtools::document()
