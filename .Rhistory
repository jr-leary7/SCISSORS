seed.use = 629)
temp_obj <- RunTSNE(temp_obj,
reduction = "pca",
dims = 1:20,
seed.use = 629,
dim.embed = 2)
# find clusters
temp_obj <- FindNeighbors(temp_obj,
reduction = "pca",
dims = 1:20)
temp_obj <- FindClusters(temp_obj,
resolution = .2,
random.seed = 629)
reclust_list[[clust + 1]] <- temp_obj
}
}
} else {
reclust_list <- list()
for (clust in unique(seurat.object$SingleR_label)) {
temp_obj <- subset(seurat.object, subset = SingleR_label == clust)
if (var.method == "sctransform") {
print("Normalizing cluster expression & selecting highly variable genes using SCTransform")
temp_obj <- SCTransform(temp_obj,
variable.features.n = n.variable.genes,
seed.use = 629,
verbose = FALSE)
} else if (var.method == "vst") {
temp_obj <- FindVariableFeatures(temp_obj,
selection.method = "vst",
nfeatures = n.variable.genes)
} else { stop("Choose a viable highly variable gene selection method") }
if (ncol(temp_obj) < 100) { reclust_list[[clust + 1]] <- temp_obj } else {
# run PCA
temp_obj <- RunPCA(temp_obj,
npcs = 20,
verbose = FALSE,
seed.use = 629)
temp_obj <- RunTSNE(temp_obj,
reduction = "pca",
dims = 1:20,
seed.use = 629,
dim.embed = 2,
perplexity = perplexity)
# find clusters
temp_obj <- FindNeighbors(temp_obj,
reduction = "pca",
dims = 1:20)
temp_obj <- FindClusters(temp_obj,
resolution = .2,
random.seed = 629)
reclust_list[[clust + 1]] <- temp_obj
}
}
}
return(reclust_list)
}
# re-cluster each cluster after re-identifying the 3,000 highest-variance genes within each cluster
reclust_results <- ReclusterCells(seurat.object)
# create re-clustered plots to inspect visually
plot_list <- list()
# create re-clustered plots to inspect visually
plot_list <- list()
for (clust in seq(reclust_results)) {
plot_list[[clust]] <- DimPlot(reclust_results[[clust]], reduction = "tsne", group.by = "seurat_cluster")
}
for (clust in seq(reclust_results)) {
plot_list[[clust]] <- DimPlot(reclust_results[[clust]], reduction = "tsne", group.by = "seurat_clusters")
}
for (i in seq(plot_list)) {print(plot_list[[i]])}
for (i in seq(plot_list)) {print(plot_list[[i]])}
sc_ref=readRDS("/Volumes/labs/Home/Jen Jen Yeh Lab/Jack/scRNAseq/Seurat/single_cell_ref_normalized.Rds")
sc_res=SingleR(test=data.frame(seurat.object@assays$SCT@data), ref=sc_ref, labels = sc_ref$label, clusters = seurat.object$seurat_clusters, method = "cluster", de.method = "wilcox")
table(sc_res$labels)
unique(sc_ref$label)
library(Seurat)
library(scRNAseq)
library(SingleR)
seurat.object=BaronPancreasData()
library(Seurat); library(SingleR); library(scRNAseq); library(patchwork); library(ggplot2); library(dittoSeq); library(jackknife)
seurat.object=BaronPancreasData()
random.seed=629
initial.resolution=.5
v.variable.genes=4000
if (class(seurat.object)[1] == "SingleCellExperiment") {
print("Converting user-supplied SingleCellExperiment object to Seurat object")
seurat.object <- as.Seurat(seurat.object, data = NULL)
# add necessary metadata to calculate % mito & regress it out
RNA_counts <- colSums(x = seurat.object, slot = "counts")
feature_counts <- colSums(x = GetAssayData(object = seurat.object, slot = "counts") > 0)
seurat.object@meta.data$nCount_RNA <- RNA_counts
seurat.object@meta.data$nFeature_RNA <- feature_counts
seurat.object[["percent_MT"]] <- PercentageFeatureSet(seurat.object, pattern = "^MT-|^mt-")
print("Normalizing counts using SCTransform negative-binomial regression")
seurat.object <- SCTransform(seurat.object,
assay = "RNA",
vars.to.regress = "percent_MT",
variable.features.n = n.variable.genes,
seed.use = random.seed,
verbose = FALSE)
}
n.variable.genes=4000
rm(v.variable.genes)
seurat.object <- SCTransform(seurat.object,
assay = "RNA",
vars.to.regress = "percent_MT",
variable.features.n = n.variable.genes,
seed.use = random.seed,
verbose = FALSE)
x=c(1:3)
y=c(4:6)
x*y
sum(x*y)
((sqrt(sum(x^2))) * (sqrt(sum(y^2))))
# calculate cosine similarity
cos_sim <- sum((x * y)) / ((sqrt(sum(x^2))) * (sqrt(sum(y^2))))
cos_sim
plot(x, y)
devtools::document()
n.variable.genes=3000
# check if PCA components exist in Seurat object
if (is.null(seurat.object@reductions$pca)) {
print(sprintf("Running PCA with 30 principal components using %s highly variable genes", n.variable.genes))
seurat.object <- RunPCA(seurat.object,
features = VariableFeatures(seurat.object),
npcs = 30,
verbose = FALSE,
seed.use = random.seed)
}
# check if t-SNE components exist in Seurat object
if (is.null(seurat.object@reductions$tsne)) {
print("Running t-SNE on 30 principal components with perplexity = 30")
seurat.object <- RunTSNE(seurat.object,
reduction = "pca",
dims = 1:30,
dim.embed = 2,
seed.use = random.seed,
perplexity = 30)
}
sqrt(ncol(seurat.object))
DimPlot(seurat.object)
seurat.object <- FindNeighbors(seurat.object,
reduction = "pca",
dims = 1:30,
k.param = 90)
seurat.object <- FindClusters(seurat.object,
resolution = .5,
algorithm = 1,
random.seed = 629)
DimPlot(seurat.object)
10^ceiling(log10(92.3))
10^floor(log10(92.3))
round(sqrt(ncol(seurat.object)))
seurat.object <- FindNeighbors(seurat.object,
reduction = "pca",
dims = 1:30,
k.param = round(sqrt(ncol(seurat.object))))
seurat.object <- FindClusters(seurat.object,
resolution = .5,
algorithm = 1,
random.seed = 629)
DimPlot(seurat.object)
reclust_list <- list()
print("Identifying most variable genes and re-clustering each cluster")
unique_clusts <- sort(as.integer(unique(seurat.object$seurat_clusters)) - 1)
unique_clusts
clust=2
temp_obj <- subset(seurat.object, subset = seurat_clusters == clust)
temp_obj <- FindVariableFeatures(temp_obj,
assay = "SCT",
selection.method = "vst",
nfeatures = n.variable.genes,
verbose = FALSE)
dim(temp_obj)
temp_obj <- RunPCA(temp_obj,
npcs = 30,
seed.use = 629,
verbose = FALSE)
sqrt(ncol(temp_obj))
# use k ~ sqrt(N) general rule
temp_obj <- FindNeighbors(temp_obj,
reduction = "pca",
k.param = round(sqrt(ncol(temp_obj))))
seurat.obj=temp_obj
pca_df <- data.frame(Embeddings(seurat.obj, reduction = "pca"))
sil_stats <- c()
sil_stats <- list()
for (cell in nrow(pca_df[1:5, ])) { print(cell)}
for (cell in seq(nrow(pca_df[1:5, ]))) { print(cell)}
length(seq(nrow(pca_df)))
CosSimilarity(pca_df[1, ], pca_df[2, ])
CosSimilarity(pca_df[1, ], pca_df[3, ])
sil_stats <- list()
cell=1
pca_sub <- pca_df[-cell, ]
temp <- c()
for (i in seq(nrow(pca_sub))) {
temp[i] <- CosSimilarity(x = pca_df[cell, ], y = pca_sub[i, ])
}
t=c()
mean(temp)
sil_stats[[cell]] <- mean(temp)
sil_stats <- list()
for (cell in seq(nrow(pca_df))) {
pca_sub <- pca_df[-cell, ]
temp <- c()
for (i in seq(nrow(pca_sub))) {
temp[i] <- CosSimilarity(x = pca_df[cell, ], y = pca_sub[i, ])
}
sil_stats[[cell]] <- mean(temp)
}
pca_df$cluster <- as.integer(seurat.obj$seurat_clusters)
res=.3
temp_obj <- FindClusters(temp_obj,
resolution = res,
algorithm = 1,
random.seed = random.seed)
seurat.obj <- temp_obj
pca_df <- data.frame(Embeddings(seurat.obj, reduction = "pca"))
pca_df$cluster <- as.integer(seurat.obj$seurat_clusters)
unique(pca_df$cluster)
pca_df$cluster <- as.integer(seurat.obj$seurat_clusters) - 1
unique(pca_df$cluster)
pca_clust <- pca_df[pca_df$cluster == clust, ,drop = FALSE]
View(pca_clust)
pca_clust <- pca_df[pca_df$cluster == clust, ,drop = FALSE, -max(ncol(pca_df))]
pca_clust <- pca_df[pca_df$cluster == clust, -max(ncol(pca_df)), drop = FALSE]
View(pca_clust)
pca_other_clust <- pca_df[pca_df$cluster != clust, -max(ncol(pca_df)), drop = FALSE]
# compute distance matrices
dist_list <- list()
master_list <- list()
pca_df <- data.frame(Embeddings(seurat.obj, reduction = "pca"))
pca_df$cluster <- as.integer(seurat.obj$seurat_clusters) - 1
View(pca_df)
t=dist(pca_df[, -31], method = "euclidean")
View(t)
rm(t)
head(rownames(pca_df))
View(pca_df)
cell_list <- list()
cell=1
cell_list[[1]] <- pca_df[cell, max(ncol(pac_df))]
cell_list[[1]] <- pca_df[cell, max(ncol(pca_df))]
View(cell_list)
cell_list[[1]]
View(cell_list)
DimPlot(seurat.obj)
DimPlot(seurat.object)
DimPlot(seurat.obj, reduction = "pca")
pca_cell_clust <- subset(pca_df, pca_df$cluster == cell_list[[1]])
pca_cell_clust <- pca_cell_clust[-cell, ]
cos_list <- c()
for (other_cell in seq(nrow(pca_cell_clust))) {
cos_list[other_cell] <- CosSimilarity(x = pca_df[cell, -max(ncol(pca_df))],
y = pca_cell_clust[other_cell, ])
}
cos_list <- c()
for (other_cell in seq(nrow(pca_cell_clust))) {
cos_list[other_cell] <- CosSimilarity(x = pca_df[cell, -max(ncol(pca_df))],
y = pca_cell_clust[other_cell, -max(ncol(pca_cell_clust))])
}
mean(cos_list)
cell_list[[2]] <- mean(cos_list)
# compute cosine similarities to cells in other clusters
cos_list <- c()
pca_other_clust <- subset(pca_df, pca_df$cluster != cell_list[[1]])
res_df <- data.frame(Cell = rep(NA, nrow(pca_df)),
ClusterID = rep(NA, nrow(pca_df)),
MeanToOwn = rep(NA, nrow(pca_df)),
NeighborCluster = rep(NA, nrow(pca_df)),
MeanToNeighbor = rep(NA, nrow(pca_df)),
SilhouetteScore = rep(NA, nrow(pca_df)))
View(res_df)
res_df <- data.frame(Cell = rownames(pca_df),
ClusterID = pca_df$cluster,
MeanToOwn = rep(NA, nrow(pca_df)),
NeighborCluster = rep(NA, nrow(pca_df)),
MeanToNeighbor = rep(NA, nrow(pca_df)),
SilhouetteScore = rep(NA, nrow(pca_df)))
View(res_df)
unique(res_df$ClusterID)
own_clus_dist <- c()
cell=1
own_clus_dist <- c()
own_clust_dist <- c()
rm(own_clus_dist)
own_clust <- pca_df[-cell, -max(ncol(pca_df)), drop = FALSE]
for (i in seq(nrow(own_clust))) {
own_clust_dist[i] <- CosSimilarity(x = cell_vec, own_clust[i, ])
}
cell_vec <- pca_df[cell, -max(ncol(pca_df)), drop = FALSE]
own_clust <- pca_df[-cell, -max(ncol(pca_df)), drop = FALSE]
for (i in seq(nrow(own_clust))) {
own_clust_dist[i] <- CosSimilarity(x = cell_vec, own_clust[i, ])
}
res_df$MeanToOwn[cell] <- mean(own_clust_dist)
mean(own_clust_dist)
# compute distances to own cluster members
own_clust_dist <- c()
cell_vec <- pca_df[cell, -max(ncol(pca_df)), drop = FALSE]
own_clust <- pca_df[-cell, ]
other_cells <- pca_df[-cell, ]
cell_vec <- pca_df[cell, ]
own_clust_dist <- c()
cell_vec <- pca_df[cell, ]
other_cells <- pca_df[-cell, ]
# compute distances to own cluster members
for (i in seq(nrow(other_cells[other_cells$cluster == cell_vec$cluster, ]))) {
own_clust_dist[i] <- CosSimilarity(x = cell_vec[, -max(ncol(cell_vec)), drop = FALSE],
y = own_clust[i, -max(ncol(pca_df)), drop = FALSE])
}
res_df$MeanToOwn[cell] <- mean(own_clust_dist)
# compute distance to other clusters
other_clusts <- c()
unique(other_cells$cluster)
unique(other_cells$cluster) - cell_vec$cluster
subset(unique(other_cells$cluster), other_cells$cluster != cell_vec$cluster)
other_cells <- other_cells[other_cells$cluster != cell_vec$cluster, ]
unique(other_cells$cluster)
temp_dist <- c()
# compute distance to other clusters
other_clusts <- c()
other_cells <- other_cells[other_cells$cluster != cell_vec$cluster, ]
for (clust in unique(other_cells$cluster)) {
temp_df <- other_cells[other_cells$cluster == clust, , drop = FALSE]
temp_dist <- c()
for (other_cell in seq(nrow(temp_df))) {
temp_dist[other_cell] <- CosSimilarity(x = cell_vec[, -max(ncol(cell_vec)), drop = FALSE],
y = temp_df[other_cell, -max(ncol(temp_df))], drop = FALSE)
}
other_clusts[clust] <- mean(temp_dist)
names(other_clusts[clust]) <- temp_df$cluster[1]
}
# compute distance to other clusters
other_clusts <- c()
other_cells <- other_cells[other_cells$cluster != cell_vec$cluster, ]
for (clust in unique(other_cells$cluster)) {
temp_df <- other_cells[other_cells$cluster == clust, , drop = FALSE]
temp_dist <- c()
for (other_cell in seq(nrow(temp_df))) {
temp_dist[other_cell] <- CosSimilarity(x = cell_vec[, -max(ncol(cell_vec)), drop = FALSE],
y = temp_df[other_cell, -max(ncol(temp_df)), drop = FALSE])
}
other_clusts[clust] <- mean(temp_dist)
names(other_clusts[clust]) <- temp_df$cluster[1]
}
tinytex::reinstall_tinytex()
# compute distance to other clusters
other_clusts <- c()
other_cells <- other_cells[other_cells$cluster != cell_vec$cluster, ]
unique(other_cells$cluster)
for (clust in unique(other_cells$cluster)) {
# create subset consisting  solely of cells in cluster "clust"
temp_df <- other_cells[other_cells$cluster == clust, , drop = FALSE]
# compute distances of the cell to cells in cluster "clust"
temp_dist <- c()
for (other_cell in seq(nrow(temp_df))) {
temp_dist[other_cell] <- CosSimilarity(x = cell_vec[, -max(ncol(cell_vec)), drop = FALSE],
y = temp_df[other_cell, -max(ncol(temp_df)), drop = FALSE])
}
other_clusts[clust] <- mean(temp_dist)
}
other_clusts
unique(seurat.obj$seurat_clusters)
unique(other_cells$cluster)
clust=0
# create subset consisting  solely of cells in cluster "clust"
temp_df <- other_cells[other_cells$cluster == clust, , drop = FALSE]
View(temp_df)
dim(seurat.obj)
table(seurat.obj$seurat_clusters)
as.character(temp_df$cluster[1])
# compute distances of the cell to cells in cluster "clust"
temp_dist <- c()
for (j in seq(nrow(temp_df))) {
temp_dist[j] <- CosSimilarity(x = cell_vec[, -max(ncol(cell_vec)), drop = FALSE],
y = temp_df[j, -max(ncol(temp_df)), drop = FALSE])
}
mean(temp_dist)
other_clusts[clust] <- mean(temp_dist)
other_clusts
# compute distance to other clusters
other_clusts <- c()
other_cells <- other_cells[other_cells$cluster != cell_vec$cluster, ]
for (clust in unique(other_cells$cluster)) {
# create subset consisting  solely of cells in cluster "clust"
temp_df <- other_cells[other_cells$cluster == clust, , drop = FALSE]
# compute distances of the cell to cells in cluster "clust"
temp_dist <- c()
for (j in seq(nrow(temp_df))) {
temp_dist[j] <- CosSimilarity(x = cell_vec[, -max(ncol(cell_vec)), drop = FALSE],
y = temp_df[j, -max(ncol(temp_df)), drop = FALSE])
}
other_clusts[clust + 1] <- mean(temp_dist)
names(other_clusts)[clust + 1] <- as.character(temp_df$cluster[1])
}
other_clusts
length(other_clusts)
other_clust[3]
other_clusts[3]
other_clusts[4]
# compute distance to other clusters
other_cells <- other_cells[other_cells$cluster != cell_vec$cluster, ]
other_clusts <- data.frame(Cluster = unique(other_cells$cluster),
Distance = rep(NA, length(unique(other_cells$cluster))))
View(other_clusts)
rm(other_cell)
# compute distance to other clusters
other_cells <- other_cells[other_cells$cluster != cell_vec$cluster, ]
other_clusts <- data.frame(Cluster = unique(other_cells$cluster),
Distance = rep(NA, length(unique(other_cells$cluster))))
for (i in seq(nrow(other_clusts))) {
# create subset consisting  solely of cells in cluster "clust"
temp_df <- other_cells[other_cells$cluster == other_clusts$Cluster[i], , drop = FALSE]
# compute distances of the cell to cells in cluster "clust"
temp_dist <- c()
for (j in seq(nrow(temp_df))) {
temp_dist[j] <- CosSimilarity(x = cell_vec[, -max(ncol(cell_vec)), drop = FALSE],
y = temp_df[j, -max(ncol(temp_df)), drop = FALSE])
}
other_clusts$Distance[i] <- mean(temp_dist)
}
View(other_clusts)
# define nearest neighbor cluster for each cell
res_df$NeighborCluster <- other_clusts[other_clusts$Distance == min(other_clusts$Distance), ]$Cluster
res_df$NeighborCluster <- NA
res_df$NeighborCluster[cell] <- other_clusts[other_clusts$Distance == min(other_clusts$Distance), ]$Cluster
res_df$MeanToNeighbor[cell] <- other_clusts[other_clusts$Distance == min(other_clusts$Distance), ]$Distance
res_df$SilhouetteScore[cell] <- (res_df$MeanToNeighbor[cell] - res_df$MeanToOwn[cell]) / max(res_df$MeanToNeighbor[cell],
res_df$MeanToOwn[cell])
cell
res_df$Cell[1]
p="human1_lib1.final_cell_0022"
DimPlot(seurat.obj, cells.highlight = p)
DimPlot(seurat.obj)
for (cell in seq(nrow(res_df))) {
own_clust_dist <- c()
cell_vec <- pca_df[cell, ]
other_cells <- pca_df[-cell, ]
# compute distances to own cluster members
for (i in seq(nrow(other_cells[other_cells$cluster == cell_vec$cluster, ]))) {
own_clust_dist[i] <- CosSimilarity(x = cell_vec[, -max(ncol(cell_vec)), drop = FALSE],
y = own_clust[i, -max(ncol(other_cells)), drop = FALSE])
}
res_df$MeanToOwn[cell] <- mean(own_clust_dist)
# compute distance to other clusters
other_cells <- other_cells[other_cells$cluster != cell_vec$cluster, ]
other_clusts <- data.frame(Cluster = unique(other_cells$cluster),
Distance = rep(NA, length(unique(other_cells$cluster))))
for (i in seq(nrow(other_clusts))) {
# create subset consisting  solely of cells in cluster "clust"
temp_df <- other_cells[other_cells$cluster == other_clusts$Cluster[i], , drop = FALSE]
# compute distances of the cell to cells in cluster "clust"
temp_dist <- c()
for (j in seq(nrow(temp_df))) {
temp_dist[j] <- CosSimilarity(x = cell_vec[, -max(ncol(cell_vec)), drop = FALSE],
y = temp_df[j, -max(ncol(temp_df)), drop = FALSE])
}
other_clusts$Distance[i] <- mean(temp_dist)
}
# define nearest neighbor cluster for each cell
res_df$NeighborCluster[cell] <- other_clusts[other_clusts$Distance == min(other_clusts$Distance), ]$Cluster
res_df$MeanToNeighbor[cell] <- other_clusts[other_clusts$Distance == min(other_clusts$Distance), ]$Distance
res_df$SilhouetteScore[cell] <- (res_df$MeanToNeighbor[cell] - res_df$MeanToOwn[cell]) / max(res_df$MeanToNeighbor[cell],
res_df$MeanToOwn[cell])
}
View(res_df)
length(which(is.na(res_df)))
length(which(is.na(res_df))) / 6
pca_df <- data.frame(Embeddings(seurat.obj, reduction = "pca"))
pca_mat <- as.matrix(pca_df)
cos_sim <- pca_mat / sqrt(rowSums(pca_mat * pca_mat))
cos_sim <- cos_sim %*% t(cos_sim)
View(cos_sim)
cos_sim <- data.frame(cos_sim)
View(cos_sim)
cos_sim$clust <- as.integer(seurat.obj$seurat_clusters) - 1
View(cos_sim)
i=1
clust_df <- cos_sim[i, which(colnames(cos_sim) %in% rownames(cos_sim[cos_sim$clust == cos_sim$clust[i]])), drop = FALSE]
View(clust_df)
View(clust_df)
t=cos_sim[cos_sim$clust == cos_sim$clust[1]]
head(rownames(t))
head(colnames(cos_sim))
q=which(colnames(cos_sim) %in% t)
clust_cells <- rownames(cos_sim[cos_sim$clust == cos_sim$clust[i], ])
table(seurat.obj$seurat_clusters)
cos_sim$clust[1]
which(colnames(cos_sim %in% clust_cells))
which(colnames(cos_sim) %in% clust_cells)
length(which(colnames(cos_sim) %in% clust_cells))
clust_df <- cos_sim[i, which(colnames(cos_sim) %in% clust_cells), drop = FALSE]
View(clust_df)
which(clust_df[1, ] == 1)
which(clust_df == 1)
which(clust_df = 1)
which(clust_df[1, ] = 1)
View(clust_df)
clust_df[1, 1] == 1
head(clust_df)
clust_df[1, 1]
clust_df[1, 1] == 1
clust_df[1, 1] > .9999
typeof(clust_df[1, 1])
clust_df[1, 1] == 1.0
clust_df[1, 1] > .9999999
which(clust_df[1, ] > .999999)
clust_df <- clust_df[clust_df[1, ] < .999999, ]
View(clust_df)
clust_df <- cos_sim[i, which(colnames(cos_sim) %in% clust_cells), drop = FALSE]
View(clust_df)
