reduction = "pca",
dim.embed = 2,
seed.use = random.seed)
# set k parameter
if (is.null(k.val)) {k.val <- round(sqrt(ncol(temp_obj)))}
temp_obj <- FindNeighbors(temp_obj,
reduction = "pca",
k.param = k.val)
# iterate over resolution parameters and compute silhouette scores to find best re-clustering
sil_scores <- c()
for (res in seq(resolution.vals)) {
temp_obj <- FindClusters(temp_obj,
resolution = resolution.vals[res],
algorithm = 1,
random.seed = random.seed,
verbose = FALSE)
if (length(unique(levels(temp_obj$seurat_clusters))) > 1) {
sil_res <- ComputeSilhouetteScores(seurat.obj = temp_obj)
mean_sil <- mean(sil_res)
sil_scores[res] <- mean_sil
} else {
# neutral placeholder value for the case when the number of identified clusters is 1
sil_scores[res] <- 0
}
}
# extract best parameters and save results
names(sil_scores) <- as.character(resolution.vals)
if (max(sil_scores) > .25) {
correct_res <- as.numeric(names(sil_scores[sil_scores == max(sil_scores)]))
print(sprintf("Clustering cells using resolution = %s, which achieved silhouette score: %s",
correct_res,
round(max(sil_scores), 4)))
temp_obj <- FindClusters(temp_obj,
resolution = correct_res,
algorithm = 1,
random.seed = random.seed)
if (do.plot == TRUE) {
print(DimPlot(temp_obj, reduction = "tsne") + labs(title = sprintf("Reclustering with resolution = %s", correct_res)))
}
} else {
# replace new object w/ original one, as no subpopulations were found
print(sprintf("Did not find suffcient evidence of subclusters, as the max silhouette score was: %s", round(max(sil_scores), 4)))
temp_obj <- subset(seurat.object, subset = seurat_clusters == which.clust[[clust]])
}
reclust_list[[clust]] <- temp_obj
}
names(reclust_list) <- as.character(unlist(which.clust))
}
return(reclust_list)
}
t_list=list()
t_list[[1]]=0
reclust_results=ReclusterCells(seurat.object, which.clust = t_list, do.plot = TRUE)
rm(t_list)
k.val=NULL
do.plot=TRUE
resolution.vals = c(.05, .1, .2, .35)
random.seed=629
n.variable.genes = 4000
if (which.cells != "auto" & length(which.cells) >= 1) {print("Fcuky ducky")}
if (which.cells != "auto" & length(which.clust) >= 1) {print("FUCK")}
if (which.clust != "auto" & length(which.clust) >= 1) {print("FUCK")}
ReclusterCells <- function(seurat.object = NULL,
n.variable.genes = 4000,
which.clust = "auto",
resolution.vals = c(.05, .1, .2, .35),
k.val = NULL,
do.plot = FALSE,
random.seed = 629) {
# test input
if (is.null(seurat.object)) { stop("You forgot to supply a Seurat object as input!") }
if (which.clust != "auto" & length(which.clust) >= 1) {
reclust_list <- list()
unique_clusts <- sort(as.integer(unique(seurat.object$seurat_clusters)) - 1)
print(sprintf("Identifying %s most variable genes and re-clustering each cluster", n.variable.genes))
for (clust in seq(which.clust)) {
print(sprintf("Identifying subpopulations in cluster %s using %s highly variable genes",
which.clust[[clust]],
n.variable.genes))
temp_obj <- subset(seurat.object, subset = seurat_clusters == which.clust[[clust]])
temp_obj <- SCTransform(temp_obj,
vars.to.regress = "percent_MT",
seed.use = random.seed,
variable.features.n = n.variable.genes,
verbose = FALSE)
temp_obj <- RunPCA(temp_obj,
npcs = 15,
seed.use = 629,
verbose = FALSE,
features = VariableFeatures(temp_obj))
temp_obj <- RunTSNE(temp_obj,
reduction = "pca",
dim.embed = 2,
seed.use = random.seed)
# set k parameter
if (is.null(k.val)) {k.val <- round(sqrt(ncol(temp_obj)))}
temp_obj <- FindNeighbors(temp_obj,
reduction = "pca",
k.param = k.val)
# iterate over resolution parameters and compute silhouette scores to find best re-clustering
sil_scores <- c()
for (res in seq(resolution.vals)) {
temp_obj <- FindClusters(temp_obj,
resolution = resolution.vals[res],
algorithm = 1,
random.seed = random.seed,
verbose = FALSE)
if (length(unique(levels(temp_obj$seurat_clusters))) > 1) {
sil_res <- ComputeSilhouetteScores(seurat.obj = temp_obj)
mean_sil <- mean(sil_res)
sil_scores[res] <- mean_sil
} else {
# neutral placeholder value for the case when the number of identified clusters is 1
sil_scores[res] <- 0
}
}
# extract best parameters and save results
names(sil_scores) <- as.character(resolution.vals)
if (max(sil_scores) > .25) {
correct_res <- as.numeric(names(sil_scores[sil_scores == max(sil_scores)]))
print(sprintf("Clustering cells using resolution = %s, which achieved silhouette score: %s",
correct_res,
round(max(sil_scores), 4)))
temp_obj <- FindClusters(temp_obj,
resolution = correct_res,
algorithm = 1,
random.seed = random.seed)
if (do.plot == TRUE) {
print(DimPlot(temp_obj, reduction = "tsne") + labs(title = sprintf("Reclustering with resolution = %s", correct_res)))
}
} else {
# replace new object w/ original one, as no subpopulations were found
print(sprintf("Did not find suffcient evidence of subclusters, as the max silhouette score was: %s", round(max(sil_scores), 4)))
temp_obj <- subset(seurat.object, subset = seurat_clusters == which.clust[[clust]])
}
reclust_list[[clust]] <- temp_obj
}
names(reclust_list) <- as.character(unlist(which.clust))
}
return(reclust_list)
}
if (which.clust != "auto" & length(which.clust) >= 1) {
reclust_list <- list()
unique_clusts <- sort(as.integer(unique(seurat.object$seurat_clusters)) - 1)
print(sprintf("Identifying %s most variable genes and re-clustering each cluster", n.variable.genes))
for (clust in seq(which.clust)) {
print(sprintf("Identifying subpopulations in cluster %s using %s highly variable genes",
which.clust[[clust]],
n.variable.genes))
temp_obj <- subset(seurat.object, subset = seurat_clusters == which.clust[[clust]])
temp_obj <- SCTransform(temp_obj,
vars.to.regress = "percent_MT",
seed.use = random.seed,
variable.features.n = n.variable.genes,
verbose = FALSE)
temp_obj <- RunPCA(temp_obj,
npcs = 15,
seed.use = 629,
verbose = FALSE,
features = VariableFeatures(temp_obj))
temp_obj <- RunTSNE(temp_obj,
reduction = "pca",
dim.embed = 2,
seed.use = random.seed)
# set k parameter
if (is.null(k.val)) {k.val <- round(sqrt(ncol(temp_obj)))}
temp_obj <- FindNeighbors(temp_obj,
reduction = "pca",
k.param = k.val)
# iterate over resolution parameters and compute silhouette scores to find best re-clustering
sil_scores <- c()
for (res in seq(resolution.vals)) {
temp_obj <- FindClusters(temp_obj,
resolution = resolution.vals[res],
algorithm = 1,
random.seed = random.seed,
verbose = FALSE)
if (length(unique(levels(temp_obj$seurat_clusters))) > 1) {
sil_res <- ComputeSilhouetteScores(seurat.obj = temp_obj)
mean_sil <- mean(sil_res)
sil_scores[res] <- mean_sil
} else {
# neutral placeholder value for the case when the number of identified clusters is 1
sil_scores[res] <- 0
}
}
# extract best parameters and save results
names(sil_scores) <- as.character(resolution.vals)
if (max(sil_scores) > .25) {
correct_res <- as.numeric(names(sil_scores[sil_scores == max(sil_scores)]))
print(sprintf("Clustering cells using resolution = %s, which achieved silhouette score: %s",
correct_res,
round(max(sil_scores), 4)))
temp_obj <- FindClusters(temp_obj,
resolution = correct_res,
algorithm = 1,
random.seed = random.seed)
if (do.plot == TRUE) {
print(DimPlot(temp_obj, reduction = "tsne") + labs(title = sprintf("Reclustering with resolution = %s", correct_res)))
}
} else {
# replace new object w/ original one, as no subpopulations were found
print(sprintf("Did not find suffcient evidence of subclusters, as the max silhouette score was: %s", round(max(sil_scores), 4)))
temp_obj <- subset(seurat.object, subset = seurat_clusters == which.clust[[clust]])
}
reclust_list[[clust]] <- temp_obj
}
names(reclust_list) <- as.character(unlist(which.clust))
}
DimPlot(seurat.object, reduction = "tsne")
which.clust=list(7)
which.clust
reclust_results=ReclusterCells(seurat.object, n.variable.genes = 4000, which.clust = list(7), do.plot = TRUE)
print(sprintf("Identifying subpopulations in cluster %s using %s highly variable genes",
which.clust[[clust]],
n.variable.genes))
temp_obj <- subset(seurat.object, subset = seurat_clusters == which.clust[[clust]])
temp_obj <- SCTransform(temp_obj,
vars.to.regress = "percent_MT",
seed.use = random.seed,
variable.features.n = n.variable.genes,
verbose = FALSE)
temp_obj <- RunPCA(temp_obj,
npcs = 15,
seed.use = 629,
verbose = FALSE,
features = VariableFeatures(temp_obj))
DimPlot(temp_obj)
DimPlot(temp_obj, reduction = "tsne")
which.clust[[clust]]
DimPlot(seurat.object, reduction = "tsne")
reclust_results=ReclusterCells(sseurat.object, which.clust = list(6), do.plot = TRUE)
reclust_results=ReclusterCells(seurat.object, which.clust = list(6), do.plot = TRUE)
names(reclust_results)
which.clust=6
reclust_results[[6]]
reclust_results[[names(reclust_results) == "6"]]
reclust.data = reclust_results
temp_obj <- reclust.data[[names(reclust.data) == as.character(which.clust)]]
DimPlot(temp_obj, reduction = "tsne")
marker_gene_list <- list()
unique(temp_obj$seurat_clusters)
seq(unique(temp_obj$seurat_clusters))
unique(temp_obj$seurat_clusters)[1]
unique_clusts <- as.integer(unique(temp_obj$seurat_clusters)) - 1
unique_clusts
unique_clusts <- sort(as.integer(unique(temp_obj$seurat_clusters)) - 1)
unique_clusts
i=1
unique_clusts[i]
clust_cells <- rownames(temp_obj@meta.data[temp_obj@meta.data$seurat_clusters == unique_clusts[i], ])
dim(temp_obj)
big_temp_obj <- seurat.object
big_temp_obj@meta.data$clust_indicator <- ifelse(rownames(big_temp_obj@meta.data) %in% clust_cells, "Subpopulation", "Other")
table(big_temp_obj@meta.data$clust_indicator)
?FindMarkers
markers <- FindMarkers(big_temp_obj,
slot = "data",
assay = "SCT",
group.by = "clust_indicator",
logfc.threshold = 1,
test.use = "wilcox",
random.seed = random.seed)
markers <- FindMarkers(big_temp_obj,
slot = "data",
assay = "SCT",
ident.1 = "Subpopulation",
ident.2 = "General",
group.by = "clust_indicator",
logfc.threshold = 1,
test.use = "wilcox",
random.seed = random.seed)
markers <- FindMarkers(big_temp_obj,
slot = "data",
assay = "SCT",
ident.1 = "Subpopulation",
ident.2 = "Other",
group.by = "clust_indicator",
logfc.threshold = 1,
test.use = "wilcox",
random.seed = random.seed)
View(markers)
markers <- FindMarkers(big_temp_obj,
slot = "data",
assay = "SCT",
ident.1 = "Subpopulation",
ident.2 = "Other",
group.by = "clust_indicator",
logfc.threshold = 1.25,
verbose = FALSE,
test.use = "wilcox",
random.seed = random.seed)
View(markers)
temp_obj <- reclust.data[[names(reclust.data) == as.character(which.clust)]]
marker_gene_list <- list()
unique_clusts <- sort(as.integer(unique(temp_obj$seurat_clusters)) - 1)
for (i in seq(unique_clusts)) {
clust_cells <- rownames(temp_obj@meta.data[temp_obj@meta.data$seurat_clusters == unique_clusts[i], ])
big_temp_obj <- seurat.object
big_temp_obj@meta.data$clust_indicator <- ifelse(rownames(big_temp_obj@meta.data) %in% clust_cells, "Subpopulation", "Other")
markers <- FindMarkers(big_temp_obj,
slot = "data",
assay = "SCT",
ident.1 = "Subpopulation",
ident.2 = "Other",
group.by = "clust_indicator",
logfc.threshold = 1.25,
verbose = FALSE,
test.use = "wilcox",
random.seed = random.seed)
marker_gene_list[[i]] <- markers
}
View(marker_gene_list)
names(marker_gene_list) <- as.character(unique_clusts)
View(markers)
View(markers)
devtools::document()
rm(ReclusterCells())
devtools::document()
library(YehLabClust)
knitr::opts_chunk$set(echo = TRUE)
pdac_a <- readRDS("~/Desktop/Moncada_PDAC_A_hg38.Rds")
dim(pdac_a)
View(pdac_a)
pdac_b <- readRDS("~/Desktop/Moncada_PDAC_B_hg38.Rds")
DimPlot(pdac_a, reduction = "tsne")
DimPlot(pdac_b, reduction = "tsne")
DimPlot(pdac_a, reduction = "tsne")
DimPlot(pdac_b, reduction = "tsne")
DimPlot(pdac_a, reduction = "tsne", group.by = "SingleR.labels.bulk")
DimPlot(pdac_b, reduction = "tsne", group.by = "malig")
DimPlot(pdac_a, reduction = "tsne")
DimPlot(pdac_a, reduction = "tsne", group.by = "SingleR.labels.bulk")
DimPlot(pdac_a, reduction = "tsne", group.by = "malig")
DimPlot(pdac_a, reduction = "tsne")
DimPlot(pdac_a, reduction = "tsne", group.by = "SingleR.labels.bulk")
DimPlot(pdac_a, reduction = "tsne", group.by = "SingleR.labels.sc")
DimPlot(pdac_b, reduction = "tsne", group.by = "malig")
DimPlot(pdac_b, reduction = "tsne", group.by = "SingleR.labels.sc")
DimPlot(pdac_b, reduction = "tsne", group.by = "malig")
t <- read.table("~/Downloads/GSE94820_raw.expMatrix_DCnMono.discovery.set.submission.txt")
t <- read.table("~/Downloads/GSE94820_raw.expMatrix_DCnMono.discovery.set.submission.txt", header = TRUE, row.names = 1)
SeuratData::AvailableData()
SeuratData::InstallData("cbmc")
library(YehLabClust)
library(Seurat)
library(scRNAseq)
library(SeuratData)
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
rm(list = ls())
AvailableData()
cbmc <- LoadData("cbmc")
YehLabClust::PrepareData
cbmc <- PrepareData(seurat.object = cbmc,
n.variable.genes = 4000,
n.PC = 30,
initial.resolution = .3,
do.plot = TRUE,
random.seed = 629)
knitr::opts_chunk$set(echo = TRUE,
message = FALSE,
warning = FALSE,
results = "wait")
library(SCISSORS)
library(Seurat)
library(decoderr)
library(SingleR)
library(VAM)
library(dplyr)
library(ggplot2)
library(patchwork)
fig_path <- "/Volumes/labs/Home/Jen Jen Yeh Lab/Jack/Reclustering Project/Figures/Elyada/"
raw_counts <- Read10X(data.dir = "~/Desktop/Tuveson_Tumor/Tumor Samples/")
pdac <- CreateSeuratObject(raw_counts,
project = "ElyadaTumorAggr",
min.cells = 3,
min.features = 200)
pdac@meta.data$sample <- case_when(grepl("-1", rownames(pdac@meta.data)) ~ "SRR9274536",
grepl("-2", rownames(pdac@meta.data)) ~ "SRR9274537",
grepl("-3", rownames(pdac@meta.data)) ~ "SRR9274538",
grepl("-4", rownames(pdac@meta.data)) ~ "SRR9274539",
grepl("-5", rownames(pdac@meta.data)) ~ "SRR9274540",
grepl("-6", rownames(pdac@meta.data)) ~ "SRR9274542",
grepl("-7", rownames(pdac@meta.data)) ~ "SRR9274544")
pdac@meta.data$condition <- case_when(grepl("-1", rownames(pdac@meta.data)) ~ "PDAC",
grepl("-2", rownames(pdac@meta.data)) ~ "PDAC",
grepl("-3", rownames(pdac@meta.data)) ~ "PDAC",
grepl("-4", rownames(pdac@meta.data)) ~ "PDAC",
grepl("-5", rownames(pdac@meta.data)) ~ "PDAC",
grepl("-6", rownames(pdac@meta.data)) ~ "PDAC",
grepl("-7", rownames(pdac@meta.data)) ~ "PDAC")
pdac@meta.data$sex <- case_when(grepl("-1", rownames(pdac@meta.data)) ~ "female",
grepl("-2", rownames(pdac@meta.data)) ~ "male",
grepl("-3", rownames(pdac@meta.data)) ~ "male",
grepl("-4", rownames(pdac@meta.data)) ~ "male",
grepl("-5", rownames(pdac@meta.data)) ~ "male",
grepl("-6", rownames(pdac@meta.data)) ~ "female",
grepl("-7", rownames(pdac@meta.data)) ~ "female")
rm(raw_counts)
pdac <- PrepareData(pdac,
n.variable.genes = 4000,
n.PC = 30,
which.dim.reduc = "tsne",
initial.resolution = .5,
do.plot = FALSE,
random.seed = 629)
p0 <- DimPlot(pdac) +
xlab("t-SNE 1") +
ylab("t-SNE 2") +
theme(axis.ticks = element_blank())
p0
pc_df <- data.frame(Embeddings(pdac, reduction = "tsne"))
embeddding_gauss <- as.matrix(py$embedding_gauss)
library(reticulate)
embeddding_gauss <- as.matrix(py$embedding_gauss)
rownames(embedding_gauss) <- colnames(pdac)
embedding_gauss <- as.matrix(py$embedding_gauss)
rm(embeddding_gauss)
rownames(embedding_gauss) <- colnames(pdac)
embedding_gauss <- CreateDimReducObject(embedding_gauss,
key = "FitSNE_",
assay = "SCT",
global = TRUE)
pdac@reduction$fitsne_gauss <- embedding_gauss
pdac@reductions$fitsne_gauss <- embedding_gauss
embeddding_multi <- as.matrix(py$embedding_multi)
rownames(embedding_multi) <- colnames(pdac)
embedding_multi <- as.matrix(py$embedding_multi)
rownames(embedding_multi) <- colnames(pdac)
embedding_multi <- CreateDimReducObject(embedding_multi,
key = "FitSNE_",
assay = "SCT",
global = TRUE)
rm(embeddding_multi)
pdac@reductions$fitsne_multi <- embedding_multi
p1 <- DimPlot(pdac, reduction = "fitsne_gauss") +
xlab("Fit-SNE 1") +
ylab("Fit-SNE 2") +
theme(axis.ticks = element_blank(),
axis.text = element_blank())
p2 <- DimPlot(pdac, reduction = "fitsne_multi") +
xlab("Fit-SNE 1") +
ylab("Fit-SNE 2") +
theme(axis.ticks = element_blank(),
axis.text = element_blank())
p1
p2
pc_df <- data.frame(Embeddings(pdac, reduction = "tsne"))
pc_df <- data.frame(Embeddings(pdac, reduction = "tsne"))
2-2
embedding_gauss <- as.matrix(py$embedding_g4)
rownames(embedding_gauss) <- colnames(pdac)
embedding_gauss <- CreateDimReducObject(embedding_gauss,
key = "FitSNE_",
assay = "SCT",
global = TRUE)
head(rownames(embedding_gauss))
pdac@reductions$fitsne_gauss <- embedding_gauss
embedding_multi <- as.matrix(py$embedding_m3)
rownames(embedding_multi) <- colnames(pdac)
embedding_multi <- CreateDimReducObject(embedding_multi,
key = "FitSNE_",
assay = "SCT",
global = TRUE)
pdac@reductions$fitsne_multi <- embedding_multi
p1 <- DimPlot(pdac, reduction = "fitsne_gauss") +
xlab("Fit-SNE 1") +
ylab("Fit-SNE 2") +
theme(axis.ticks = element_blank(),
axis.text = element_blank())
p2 <- DimPlot(pdac, reduction = "fitsne_multi") +
xlab("Fit-SNE 1") +
ylab("Fit-SNE 2") +
theme(axis.ticks = element_blank(),
axis.text = element_blank())
p1
p2
fig_path <- "/Volumes/labs/Home/Jen Jen Yeh Lab/Jack/Reclustering Project/Figures/Elyada/"
raw_counts <- Read10X(data.dir = "~/Desktop/Tuveson_Tumor/Tumor Samples/")
pdac <- CreateSeuratObject(raw_counts,
project = "ElyadaTumorAggr",
min.cells = 3,
min.features = 200)
pdac@meta.data$sample <- case_when(grepl("-1", rownames(pdac@meta.data)) ~ "SRR9274536",
grepl("-2", rownames(pdac@meta.data)) ~ "SRR9274537",
grepl("-3", rownames(pdac@meta.data)) ~ "SRR9274538",
grepl("-4", rownames(pdac@meta.data)) ~ "SRR9274539",
grepl("-5", rownames(pdac@meta.data)) ~ "SRR9274540",
grepl("-6", rownames(pdac@meta.data)) ~ "SRR9274542",
grepl("-7", rownames(pdac@meta.data)) ~ "SRR9274544")
pdac@meta.data$condition <- case_when(grepl("-1", rownames(pdac@meta.data)) ~ "PDAC",
grepl("-2", rownames(pdac@meta.data)) ~ "PDAC",
grepl("-3", rownames(pdac@meta.data)) ~ "PDAC",
grepl("-4", rownames(pdac@meta.data)) ~ "PDAC",
grepl("-5", rownames(pdac@meta.data)) ~ "PDAC",
grepl("-6", rownames(pdac@meta.data)) ~ "PDAC",
grepl("-7", rownames(pdac@meta.data)) ~ "PDAC")
pdac@meta.data$sex <- case_when(grepl("-1", rownames(pdac@meta.data)) ~ "female",
grepl("-2", rownames(pdac@meta.data)) ~ "male",
grepl("-3", rownames(pdac@meta.data)) ~ "male",
grepl("-4", rownames(pdac@meta.data)) ~ "male",
grepl("-5", rownames(pdac@meta.data)) ~ "male",
grepl("-6", rownames(pdac@meta.data)) ~ "female",
grepl("-7", rownames(pdac@meta.data)) ~ "female")
pdac <- PrepareData(pdac,
n.variable.genes = 4000,
n.PC = 30,
which.dim.reduc = "tsne",
initial.resolution = .5,
do.plot = FALSE,
random.seed = 629)
saveRDS(pdac, file = "/Volumes/labs/Home/Jen Jen Yeh Lab/Jack/Reclustering Project/Seurat Objects/Elyada_Tumor.Rds")
